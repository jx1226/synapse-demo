{
	"name": "LOAD_CUSTOMER_TO_RAW",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark94os7c3",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "74ed5516-7a61-4fc5-8bd2-495ea538477d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/d10c0527-c6d2-455e-9b89-850ef472b7bc/resourceGroups/dp000-94os7c3/providers/Microsoft.Synapse/workspaces/synapse94os7c3/bigDataPools/spark94os7c3",
				"name": "spark94os7c3",
				"type": "Spark",
				"endpoint": "https://synapse94os7c3.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark94os7c3",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Load to DataFrame**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"df = spark.read.load('abfss://files@datalake94os7c3.dfs.core.windows.net/data/customer.csv', format='csv'\r\n",
					"## If header exists uncomment line below\r\n",
					", header=True\r\n",
					")\r\n",
					"display(df.limit(10))"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Load the file data into a managed delta table (RAW)**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import col\r\n",
					"\r\n",
					"delta_table_path = \"/raw/customers-delta\"\r\n",
					"\r\n",
					"# convert type\r\n",
					"types_to_change = {\r\n",
					"  'c_custkey' : 'int',\r\n",
					"  'c_nationkey' : 'int',\r\n",
					"  'c_acctbal' : 'double'\r\n",
					"}\r\n",
					"for column in types_to_change:\r\n",
					"  df = df.withColumn(column,col(column).cast(types_to_change[column]))\r\n",
					"\r\n",
					"# save df with new types overwriting the schema\r\n",
					"df.write.format(\"delta\").mode(\"overwrite\").option(\"overwriteSchema\",True).save(delta_table_path)\r\n",
					"\r\n",
					"# write data to raw table \r\n",
					"df.write.format(\"delta\").mode(\"overwrite\").saveAsTable(\"raw.customer\")\r\n",
					"\r\n",
					"spark.sql(\"DESCRIBE EXTENDED raw.customer\").show(truncate=False)"
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**SQL zum Anschauen der Daten**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"USE raw;\r\n",
					"SELECT * FROM customer;"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.session.stop()"
				],
				"execution_count": 4
			}
		]
	}
}