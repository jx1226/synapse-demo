{
	"name": "CREATE_ZONES_AND_TABLES",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkaslm4on",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "3acdf2c2-aaec-4d46-b90c-232c7982254e"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/d10c0527-c6d2-455e-9b89-850ef472b7bc/resourceGroups/dp000-aslm4on/providers/Microsoft.Synapse/workspaces/synapseaslm4on/bigDataPools/sparkaslm4on",
				"name": "sparkaslm4on",
				"type": "Spark",
				"endpoint": "https://synapseaslm4on.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkaslm4on",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**Create managed Databases (Zonen) and Tables in Synapse**"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.utils import ParseException\r\n",
					"from pyspark.sql import SparkSession, DataFrame, Window\r\n",
					"import pyspark.sql.functions as F\r\n",
					"\r\n",
					"spark = SparkSession.builder.appName('DataModeling').getOrCreate()\r\n",
					"\r\n",
					"# create raw zones and tables\r\n",
					"spark.sql(\"CREATE DATABASE raw\")\r\n",
					"# create table\r\n",
					"spark.sql(\"CREATE OR REPLACE TABLE raw.product (productid Int, productname String, category String, price double) USING DELTA LOCATION '/raw/products-delta'\")\r\n",
					"spark.sql(\"CREATE OR REPLACE TABLE raw.customer (c_custkey Int, c_name String, c_address String, c_nationkey Int, c_phone String, c_acctbal decimal(18,2), c_mktsegment String, c_comment String) USING DELTA LOCATION '/raw/customers-delta'\")\r\n",
					"spark.sql(\"CREATE OR REPLACE TABLE raw.orders (o_orderkey Int, o_custkey Int, o_orderstatus String, o_totalprice decimal(18,2), o_orderdate date, o_orderpriority string, o_clerk string, o_shippriority int, o_comment string) USING DELTA LOCATION '/raw/orders-delta'\")\r\n",
					"\r\n",
					"print(\"successful\")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# create landing zones and tables\r\n",
					"spark.sql(\"CREATE DATABASE landing\")\r\n",
					"# create table\r\n",
					"spark.sql(\"CREATE OR REPLACE TABLE landing.product (productid Int, productname String, category String, price double, statustime timestamp) USING DELTA LOCATION '/landing/products-delta'\")\r\n",
					"spark.sql(\"CREATE OR REPLACE TABLE landing.customer (c_custkey Int, c_name String, c_address String, c_nationkey Int, c_phone String, c_acctbal decimal(18,2), c_mktsegment String, c_comment String, statustime timestamp) USING DELTA LOCATION '/landing/customers-delta'\")\r\n",
					"spark.sql(\"CREATE OR REPLACE TABLE landing.orders (o_orderkey Int, o_custkey Int, o_orderstatus String, o_totalprice decimal(18,2), o_orderdate date, o_orderpriority string, o_clerk string, o_shippriority int, o_comment string, statustime timestamp) USING DELTA LOCATION '/landing/orders-delta'\")\r\n",
					"\r\n",
					"print(\"successful\")"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# create enriched zones and tables\r\n",
					"spark.sql(\"CREATE DATABASE enriched\")\r\n",
					"# create table\r\n",
					"spark.sql(\"CREATE OR REPLACE TABLE enriched.product (productid Int NOT NULL, productname String, category String, price double, valid_from timestamp NOT NULL, valid_to timestamp, current String) USING DELTA LOCATION '/enriched/products-delta'\")\r\n",
					"spark.sql(\"CREATE OR REPLACE TABLE enriched.customer (c_custkey Int NOT NULL, c_name String, c_address String, c_nationkey Int, c_phone String, c_acctbal decimal(18,2), c_mktsegment String, c_comment String, valid_from timestamp NOT NULL, valid_to timestamp, current String) USING DELTA LOCATION '/enriched/customers-delta'\")\r\n",
					"spark.sql(\"CREATE OR REPLACE TABLE enriched.orders (o_orderkey Int NOT NULL, o_custkey Int, o_orderstatus String, o_totalprice decimal(18,2), o_orderdate date, o_orderpriority string, o_clerk string, o_shippriority int, o_comment string, valid_from timestamp NOT NULL, valid_to timestamp, current String) USING DELTA LOCATION '/enriched/orders-delta'\")\r\n",
					"\r\n",
					"print(\"successful\")"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"mssparkutils.session.stop()"
				],
				"execution_count": 4
			}
		]
	}
}